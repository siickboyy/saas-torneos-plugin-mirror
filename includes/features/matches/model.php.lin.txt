     1	<?php
     2	/**
     3	 * Matches Model (skeleton)
     4	 *
     5	 * @package SaaS_Torneos_Raqueta
     6	 */
     7	
     8	if ( ! defined( 'ABSPATH' ) ) { exit; }
     9	
    10	if ( ! function_exists( 'str_matches_log' ) ) {
    11		/**
    12		 * Logger central del módulo de partidos.
    13		 */
    14		function str_matches_log( $tag, $data = null ) {
    15			$prefix = '[MATCHES:' . strtoupper( $tag ) . '] ';
    16			if ( is_array( $data ) || is_object( $data ) ) {
    17				$data = wp_json_encode( $data );
    18			}
    19			@error_log( $prefix . ( $data ?? '' ) );
    20		}
    21	}
    22	
    23	/**
    24	 * Normaliza un partido a la forma “UI-friendly”.
    25	 * Por ahora devuelve un mock estable para probar el contrato REST.
    26	 *
    27	 * @param int   $post_id
    28	 * @param array $meta_overrides (opcional) para forzar valores en tests.
    29	 * @return array
    30	 */
    31	function str_matches_normalize_match( $post_id, $meta_overrides = array() ) {
    32		$now_iso = gmdate( 'c' );
    33	
    34		$mock = array(
    35			'id'                   => (int) $post_id,
    36			'competicion_id'       => (int) ( $meta_overrides['competicion_id'] ?? 0 ),
    37			'fase'                 => (string) ( $meta_overrides['fase'] ?? 'grupos' ),
    38			'grupo_id'             => isset( $meta_overrides['grupo_id'] ) ? (int) $meta_overrides['grupo_id'] : null,
    39			'pareja_a_id'          => (int) ( $meta_overrides['pareja_a_id'] ?? 0 ),
    40			'pareja_b_id'          => (int) ( $meta_overrides['pareja_b_id'] ?? 0 ),
    41			'pareja_a_nombre'      => (string) ( $meta_overrides['pareja_a_nombre'] ?? 'Pareja A' ),
    42			'pareja_b_nombre'      => (string) ( $meta_overrides['pareja_b_nombre'] ?? 'Pareja B' ),
    43			'fecha'                => (string) ( $meta_overrides['fecha'] ?? '' ),
    44			'hora'                 => (string) ( $meta_overrides['hora'] ?? '' ),
    45			'pista'                => isset( $meta_overrides['pista'] ) ? (string) $meta_overrides['pista'] : null,
    46			'estado'               => (string) ( $meta_overrides['estado'] ?? 'programado' ),
    47			'sets'                 => (array)  ( $meta_overrides['sets'] ?? array() ),
    48			'ganador_pareja_id'    => isset( $meta_overrides['ganador_pareja_id'] ) ? (int) $meta_overrides['ganador_pareja_id'] : null,
    49			'resultado_confirmado' => (bool)   ( $meta_overrides['resultado_confirmado'] ?? false ),
    50			'resumen'              => 'Pareja A vs Pareja B — ' . ( $meta_overrides['fecha'] ?? 'TBD' ) . ' ' . ( $meta_overrides['hora'] ?? '' ),
    51			'created_at'           => $now_iso,
    52			'updated_at'           => $now_iso,
    53		);
    54	
    55		return $mock;
    56	}
    57	
    58	/**
    59	 * Verifica permisos mínimos por rol/ownership.
    60	 * Skeleton: admin siempre OK; resto: lectura pública y escritura denegada (se ampliará en FASE A.3).
    61	 *
    62	 * @param WP_User $user
    63	 * @param string  $scope 'read'|'write'
    64	 * @param int     $competicion_id
    65	 * @return bool
    66	 */
    67	function str_matches_user_can( $user, $scope, $competicion_id = 0 ) {
    68		if ( user_can( $user, 'manage_options' ) ) {
    69			return true; // Admin total
    70		}
    71		// TODO: organizador (owner de la competición) y jugadores implicados (FASE A.3).
    72		if ( 'read' === $scope ) {
    73			return true;
    74		}
    75		return false;
    76	}
    77	
    78	/**
    79	 * Validación básica del payload de creación/edición (skeleton).
    80	 * Devuelve array( 'ok' => bool, 'error' => array|null ).
    81	 */
    82	function str_matches_validate_payload( $data, $context = 'create' ) {
    83		$required = array( 'competicion_id', 'fase', 'pareja_a_id', 'pareja_b_id' );
    84		if ( 'grupos' === ( $data['fase'] ?? '' ) ) {
    85			$required[] = 'grupo_id';
    86		}
    87		foreach ( $required as $key ) {
    88			if ( empty( $data[ $key ] ) && 0 !== $data[ $key ] ) {
    89				return array(
    90					'ok'    => false,
    91					'error' => array( 'code' => 'missing_' . $key, 'message' => 'Falta ' . $key, 'status' => 400 ),
    92				);
    93			}
    94		}
    95		// TODO: pertenencia (parejas/grupo/competición), duplicados, etc.
    96		return array( 'ok' => true, 'error' => null );
    97	}
