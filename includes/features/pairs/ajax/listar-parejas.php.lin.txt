     1	<?php
     2	// Antiguo /includes/ajax/ajax-listar-parejas-multiseleccion.php
     3	// ===========================
     4	// AJAX: Listar parejas confirmadas (multiselección)
     5	// ===========================
     6	
     7	if (!defined('ABSPATH')) { exit; }
     8	
     9	/** Logger central (opcional) */
    10	if (!function_exists('str_saas_log')) {
    11	    function str_saas_log($message, $context = []) {
    12	        $payload = is_string($message) ? $message : wp_json_encode($message, JSON_UNESCAPED_UNICODE);
    13	        if (!empty($context)) { $payload .= ' | ' . wp_json_encode($context, JSON_UNESCAPED_UNICODE); }
    14	        if (function_exists('str_escribir_log')) {
    15	            str_escribir_log($payload, 'PAIRS:LISTAR');
    16	            return;
    17	        }
    18	        $log_path = (defined('STR_PLUGIN_PATH') ? STR_PLUGIN_PATH : plugin_dir_path(__FILE__));
    19	        $log_file = trailingslashit($log_path) . 'debug-saas-torneos.log';
    20	        $line = '[' . date('Y-m-d H:i:s') . '] [PAIRS:LISTAR] ' . $payload . PHP_EOL;
    21	        @file_put_contents($log_file, $line, FILE_APPEND | LOCK_EX);
    22	    }
    23	}
    24	
    25	add_action('wp_ajax_str_listar_parejas_multiseleccion', 'str_ajax_listar_parejas_multiseleccion');
    26	add_action('wp_ajax_nopriv_str_listar_parejas_multiseleccion', 'str_ajax_listar_parejas_multiseleccion');
    27	
    28	function str_ajax_listar_parejas_multiseleccion() {
    29	    $t0 = microtime(true);
    30	    $req_id = function_exists('wp_generate_uuid4') ? wp_generate_uuid4() : uniqid('req_', true);
    31	
    32	    // Nota: este endpoint históricamente permite nopriv; se mantiene tal cual.
    33	    try {
    34	        check_ajax_referer('str_parejas_multiseleccion_nonce', 'nonce');
    35	    } catch (Throwable $e) {
    36	        str_saas_log('[DENY] Nonce inválido', ['req_id'=>$req_id, 'err'=>$e->getMessage()]);
    37	        wp_send_json_error(['message' => 'Nonce inválido.']);
    38	    }
    39	
    40	    $torneo_id = isset($_POST['torneo_id']) ? intval($_POST['torneo_id']) : 0;
    41	    $resultado = array();
    42	
    43	    str_saas_log('[START] Listar parejas', ['req_id'=>$req_id, 'torneo_id'=>$torneo_id]);
    44	
    45	    // Obtener TODAS las parejas publicadas
    46	    $parejas_args = array(
    47	        'post_type'      => 'pareja',
    48	        'posts_per_page' => -1,
    49	        'post_status'    => 'publish'
    50	    );
    51	    $parejas = get_posts($parejas_args);
    52	
    53	    foreach ($parejas as $pareja) {
    54	        // 1. Leer campo 'torneo_asociado'
    55	        $torneo_asociado = get_field('torneo_asociado', $pareja->ID);
    56	
    57	        // Normalizar: Puede ser ID, array de IDs, objeto WP_Post o array de WP_Post
    58	        $torneos_ids = array();
    59	
    60	        if (empty($torneo_asociado)) continue;
    61	
    62	        if (is_array($torneo_asociado)) {
    63	            foreach ($torneo_asociado as $item) {
    64	                if (is_object($item) && isset($item->ID)) {
    65	                    $torneos_ids[] = intval($item->ID);
    66	                } else {
    67	                    $torneos_ids[] = intval($item);
    68	                }
    69	            }
    70	        } elseif (is_object($torneo_asociado) && isset($torneo_asociado->ID)) {
    71	            $torneos_ids[] = intval($torneo_asociado->ID);
    72	        } else {
    73	            $torneos_ids[] = intval($torneo_asociado);
    74	        }
    75	
    76	        // Si esta pareja NO está asociada a este torneo, saltar
    77	        if (!in_array($torneo_id, $torneos_ids)) continue;
    78	
    79	        // 2. Jugador 1 y 2 (normalizar: ID, array, objeto)
    80	        $j1 = get_field('jugador_1', $pareja->ID);
    81	        $j2 = get_field('jugador_2', $pareja->ID);
    82	
    83	        $j1_id = null;
    84	        $j2_id = null;
    85	
    86	        if (is_array($j1)) {
    87	            $j1_id = is_object($j1[0]) && isset($j1[0]->ID) ? $j1[0]->ID : $j1[0];
    88	        } elseif (is_object($j1) && isset($j1->ID)) {
    89	            $j1_id = $j1->ID;
    90	        } else {
    91	            $j1_id = $j1;
    92	        }
    93	
    94	        if (is_array($j2)) {
    95	            $j2_id = is_object($j2[0]) && isset($j2[0]->ID) ? $j2[0]->ID : $j2[0];
    96	        } elseif (is_object($j2) && isset($j2->ID)) {
    97	            $j2_id = $j2->ID;
    98	        } else {
    99	            $j2_id = $j2;
   100	        }
   101	
   102	        // 3. Recoger nombre y apellido de cada jugador
   103	        $nombre_1 = $j1_id ? get_field('nombre', $j1_id) : '';
   104	        $apellido_1 = $j1_id ? get_field('apellido', $j1_id) : '';
   105	        $nombre_2 = $j2_id ? get_field('nombre', $j2_id) : '';
   106	        $apellido_2 = $j2_id ? get_field('apellido', $j2_id) : '';
   107	
   108	        $resultado[] = array(
   109	            'jugador_1_nombre' => trim($nombre_1 . ' ' . $apellido_1),
   110	            'jugador_2_nombre' => trim($nombre_2 . ' ' . $apellido_2),
   111	        );
   112	    }
   113	
   114	    str_saas_log('[END] Listado parejas OK', [
   115	        'req_id'=>$req_id,
   116	        'torneo_id'=>$torneo_id,
   117	        'total'=>count($resultado),
   118	        'dur_ms'=>round((microtime(true)-$t0)*1000)
   119	    ]);
   120	
   121	    wp_send_json_success(array('parejas' => $resultado));
   122	}
