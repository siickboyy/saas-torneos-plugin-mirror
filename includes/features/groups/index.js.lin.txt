     1	/** Grupos – Frontend (gestión simple)
     2	 * Requiere que el PHP haya localizado window.str_groups_ajax_obj (ver enqueue).
     3	 * Este fichero:
     4	 *  - Carga grupos + parejas libres
     5	 *  - Crea grupos (modal; con fallback a prompt)
     6	 *  - Asigna/Quita parejas en grupos
     7	 *  - Recalcula standings
     8	 */
     9	
    10	/* ────────────────────────────────────────────────────────────────
    11	   SHIM: crea window.strTorneo a partir de str_groups_ajax_obj
    12	   ──────────────────────────────────────────────────────────────── */
    13	(function (w) {
    14	  if (w.strTorneo) return;
    15	  var S = w.str_groups_ajax_obj || {};
    16	  if (!S || !S.ajax_url || !S.post_id) return;
    17	  var A = (S.actions || {});
    18	  w.strTorneo = {
    19	    ajaxUrl: S.ajax_url,
    20	    nonce:  S.nonce || '',
    21	    competicionId: parseInt(S.post_id, 10) || 0,
    22	    actions: {
    23	      cargar:    A.cargar    || 'saas_grupos_cargar',
    24	      aleatorio: A.aleatorio || 'saas_grupos_aleatorio',
    25	      asignar:   A.asignar   || 'saas_grupo_asignar',
    26	      standings: A.standings || 'saas_grupos_standings',
    27	      bracket:   A.bracket   || 'saas_bracket_volcar',
    28	      crear:     A.crear     || 'saas_grupo_crear',
    29	      quitar:    A.quitar    || 'saas_grupo_quitar'
    30	    }
    31	  };
    32	})(window);
    33	
    34	(function () {
    35	  "use strict";
    36	
    37	  // ---- GUARD: evita doble inicialización si el script se carga dos veces ----
    38	  if (window.__STR_GROUPS_BOOTED__) { try { console.warn('[GROUPS] Ya inicializado; salto.'); } catch(e) {} return; }
    39	  window.__STR_GROUPS_BOOTED__ = true;
    40	
    41	  // ────────────────────────────────────────────────────────────
    42	  // Utilidades / Config
    43	  // ────────────────────────────────────────────────────────────
    44	  const cfg = (window && window.strTorneo) ? window.strTorneo : {};
    45	  const AJAX = cfg.ajaxUrl || (window.ajaxurl || "/wp-admin/admin-ajax.php");
    46	  const NONCE = cfg.nonce || "";
    47	  const COMP_ID = parseInt(cfg.competicionId || 0, 10);
    48	  const ACTIONS = Object.assign({
    49	    crear:     'saas_grupo_crear',
    50	    cargar:    'saas_grupos_cargar',
    51	    asignar:   'saas_grupo_asignar',
    52	    quitar:    'saas_grupo_quitar',
    53	    aleatorio: 'saas_grupos_aleatorio',
    54	    standings: 'saas_grupos_standings',
    55	    bracket:   'saas_bracket_volcar',
    56	  }, (cfg.actions || {}));
    57	
    58	  const qs  = (sel) => document.querySelector(sel);
    59	  const qsa = (sel) => Array.from(document.querySelectorAll(sel));
    60	
    61	  // --- Supresión temporal del modal de "parejas" cuando operamos en grupos ---
    62	  function suppressPairsModal(ms = 4000) {
    63	    try { window.__STR_SUPPRESS_PAIRS_MODAL__ = Date.now() + ms; } catch(_) {}
    64	  }
    65	  function isPairsSuppressed() {
    66	    try { return window.__STR_SUPPRESS_PAIRS_MODAL__ && Date.now() < window.__STR_SUPPRESS_PAIRS_MODAL__; } catch(_) { return false; }
    67	  }
    68	
    69	  function encode(data) {
    70	    return Object.keys(data)
    71	      .map(k => encodeURIComponent(k) + "=" + encodeURIComponent(data[k] == null ? "" : data[k]))
    72	      .join("&");
    73	  }
    74	
    75	  async function postAjax(action, data = {}) {
    76	    const payload = Object.assign({}, data, {
    77	      action,
    78	      nonce: NONCE,
    79	      _ajax_nonce: NONCE
    80	    });
    81	
    82	    const res = await fetch(AJAX, {
    83	      method: "POST",
    84	      credentials: "same-origin",
    85	      headers: { "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8" },
    86	      body: encode(payload),
    87	    });
    88	
    89	    try {
    90	      const json = await res.json();
    91	      if (json && json.success) return json.data;
    92	      const msg = (json && (json.data?.message || json.message)) || "Error AJAX (success=false)";
    93	      throw new Error(msg);
    94	    } catch (e) {
    95	      let raw = "";
    96	      try { raw = await res.text(); } catch (_){}
    97	      if (!(e instanceof Error && e.message === "Unexpected end of JSON input")) {
    98	        console.error("[GRUPOS] AJAX error:", e.message, "RAW:", raw);
    99	        throw e;
   100	      }
   101	      console.error("[GRUPOS] Respuesta no JSON:", raw);
   102	      throw new Error("Respuesta no válida del servidor (no JSON).");
   103	    }
   104	  }
   105	
   106	  window.__STR_GROUPS_POST__ = postAjax;
   107	
   108	  function htmlEscape(str){
   109	    if(str==null) return "";
   110	    return String(str).replace(/[&<>"']/g, m=>({ "&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#039;" }[m]));
   111	  }
   112	
   113	  // ────────────────────────────────────────────────────────────
   114	  // Estado
   115	  // ────────────────────────────────────────────────────────────
   116	  const state = {
   117	    meta: { n_grupos: 0, n_parejas: 0, fase_final: "", modo_final: "" },
   118	    grupos: [],       // [{id, letra, tam, participantes:[{id,title,puntos?}]}]
   119	    libres: [],       // [{id,title}]
   120	    loading: false
   121	  };
   122	
   123	  // ────────────────────────────────────────────────────────────
   124	  // (OPCIÓN A) Declaración HOISTED del submit del modal
   125	  // ────────────────────────────────────────────────────────────
   126	  async function submitCreateModal() {
   127	    const btn  = document.getElementById('str-modal-create-btn');
   128	    const err  = document.getElementById('str-modal-err');
   129	    const name = (document.getElementById('str-modal-name')?.value || '').trim();
   130	
   131	    if (!COMP_ID) {
   132	      if (err) err.textContent = 'Competición inválida.', err.classList.add('show');
   133	      return;
   134	    }
   135	
   136	    try {
   137	      if (btn) btn.disabled = true, btn.textContent = 'Creando…';
   138	      await postAjax(ACTIONS.crear || 'saas_grupo_crear', { competicion_id: COMP_ID, nombre: name });
   139	      await Promise.all([
   140	        (typeof cargarGrupos === 'function' ? cargarGrupos() : Promise.resolve()),
   141	        (typeof cargarStandings === 'function' ? cargarStandings() : Promise.resolve()),
   142	      ]);
   143	      closeCreateModal();
   144	    } catch (e) {
   145	      if (err) {
   146	        err.textContent = (e && e.message) ? e.message : 'No se pudo crear el grupo.';
   147	        err.classList.add('show');
   148	      } else {
   149	        alert(e && e.message ? e.message : 'No se pudo crear el grupo.');
   150	      }
   151	    } finally {
   152	      if (btn) btn.disabled = false, btn.textContent = 'Crear';
   153	    }
   154	  }
   155	
   156	  // ────────────────────────────────────────────────────────────
   157	  // Modal "Crear grupo"
   158	  // ────────────────────────────────────────────────────────────
   159	  function ensureCreateModal() {
   160	    if (document.getElementById('str-modal-create-group')) return;
   161	
   162	    const overlay = document.createElement('div');
   163	    overlay.className = 'str-modal-overlay';
   164	    overlay.id = 'str-modal-overlay';
   165	
   166	    const modal = document.createElement('div');
   167	    modal.className = 'str-modal';
   168	    modal.id = 'str-modal-create-group';
   169	    modal.setAttribute('role', 'dialog');
   170	    modal.setAttribute('aria-modal', 'true');
   171	    modal.setAttribute('aria-labelledby', 'str-modal-create-title');
   172	
   173	    modal.innerHTML = `
   174	      <div class="str-modal-dialog" role="document">
   175	        <div class="str-modal-head">
   176	          <h3 class="str-modal-title" id="str-modal-create-title">Crear grupo</h3>
   177	        </div>
   178	        <div class="str-modal-body">
   179	          <form id="str-modal-create-form">
   180	            <div class="str-field">
   181	              <label for="str-modal-name">Nombre del grupo <span class="str-muted">(opcional, ej. A, B, C)</span></label>
   182	              <input type="text" id="str-modal-name" name="nombre" placeholder="A, B, C…" autocomplete="off" />
   183	              <div id="str-modal-err" class="str-error"></div>
   184	            </div>
   185	            <input type="hidden" id="str-modal-capacity" name="capacidad" value="" />
   186	          </form>
   187	        </div>
   188	        <div class="str-modal-foot">
   189	          <button type="button" class="str-btn" id="str-modal-cancel">Cancelar</button>
   190	          <button type="button" class="str-btn str-btn-primary" id="str-modal-create-btn">Crear</button>
   191	        </div>
   192	      </div>
   193	    `;
   194	
   195	    document.body.appendChild(overlay);
   196	    document.body.appendChild(modal);
   197	
   198	    overlay.addEventListener('click', closeCreateModal);
   199	    document.addEventListener('keydown', (e) => { if (e.key === 'Escape') closeCreateModal(); });
   200	
   201	    // 👉 Aquí usamos la función hoisted
   202	    document.getElementById('str-modal-cancel')?.addEventListener('click', closeCreateModal);
   203	    document.getElementById('str-modal-create-btn')?.addEventListener('click', submitCreateModal);
   204	    document.getElementById('str-modal-create-form')?.addEventListener('submit', (e) => {
   205	      e.preventDefault();
   206	      submitCreateModal();
   207	    });
   208	  }
   209	
   210	  function openCreateModal() {
   211	    ensureCreateModal();
   212	    const overlay = document.getElementById('str-modal-overlay');
   213	    const modal   = document.getElementById('str-modal-create-group');
   214	    const input   = document.getElementById('str-modal-name');
   215	    const err     = document.getElementById('str-modal-err');
   216	
   217	    if (err) err.classList.remove('show'), (err.textContent = '');
   218	    overlay?.classList.add('show');
   219	    modal?.classList.add('show');
   220	    setTimeout(() => input?.focus(), 30);
   221	    trapFocus(modal);
   222	  }
   223	
   224	  function closeCreateModal() {
   225	    const overlay = document.getElementById('str-modal-overlay');
   226	    const modal   = document.getElementById('str-modal-create-group');
   227	    overlay?.classList.remove('show');
   228	    modal?.classList.remove('show');
   229	  }
   230	
   231	  function trapFocus(container) {
   232	    if (!container) return;
   233	    const focusables = container.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
   234	    const list = Array.from(focusables);
   235	    if (list.length === 0) return;
   236	    const first = list[0], last = list[list.length - 1];
   237	    container.addEventListener('keydown', function onKey(e) {
   238	      if (e.key !== 'Tab') return;
   239	      if (e.shiftKey) {
   240	        if (document.activeElement === first) { last.focus(); e.preventDefault(); }
   241	      } else {
   242	        if (document.activeElement === last) { first.focus(); e.preventDefault(); }
   243	      }
   244	    });
   245	  }
   246	
   247	  // ────────────────────────────────────────────────────────────
   248	  // Render UI
   249	  // ────────────────────────────────────────────────────────────
   250	  function ensureRoot() {
   251	    let mount = document.getElementById('str-gestion-grupos');
   252	    if (!mount) {
   253	      mount = document.createElement('div');
   254	      mount.id = 'str-gestion-grupos';
   255	      document.body.appendChild(mount);
   256	      try { console.info('[GROUPS] No existía #str-gestion-grupos. Se ha inyectado al final del <body>.'); } catch(_) {}
   257	    }
   258	    return mount;
   259	  }
   260	
   261	  function render() {
   262	    const wrap = ensureRoot();
   263	
   264	    const topBar = `
   265	      <div class="str-topbar">
   266	        <div class="str-topbar-left">
   267	          <div class="muted">Competición: #${COMP_ID}</div>
   268	          <div class="muted">Grupos: ${state.meta.n_grupos || state.grupos.length}</div>
   269	          <div class="muted">Parejas libres: ${state.libres.length}</div>
   270	        </div>
   271	        <div class="str-topbar-right">
   272	          <button id="btn-crear-grupo" class="str-btn str-btn-primary" type="button">Crear grupo</button>
   273	        </div>
   274	      </div>
   275	    `;
   276	
   277	    const libresOpt = state.libres.map(p => `<option value="${p.id}">${htmlEscape(p.title)}</option>`).join("");
   278	
   279	    const cards = state.grupos.map(g => {
   280	      // Cabecera de columnas dentro del card
   281	      const headRow = `
   282	        <li class="str-row str-row-head">
   283	          <div class="str-pair-name"><span>Pareja</span></div>
   284	          <div class="str-points"><span>Puntos</span></div>
   285	          <div class="str-actions"><span>Acciones</span></div>
   286	        </li>
   287	      `;
   288	
   289	      const filas = (g.participantes || []).map(p => {
   290	        const pts = (typeof p.puntos === 'number' ? p.puntos : 0);
   291	        return `
   292	          <li class="str-row">
   293	            <div class="str-pair-name">${htmlEscape(p.title)}</div>
   294	            <div class="str-points">
   295	              <input class="str-points-input" type="number" min="0" step="1"
   296	                     value="${pts}" inputmode="numeric" aria-label="Puntos" disabled />
   297	            </div>
   298	            <div class="str-actions">
   299	              <button class="str-btn str-btn-small str-btn-remove"
   300	                      data-grupo="${g.id}" data-pareja="${p.id}" type="button">Quitar</button>
   301	            </div>
   302	          </li>
   303	        `;
   304	      }).join("");
   305	
   306	      return `
   307	        <div class="str-card grupo" data-grupo="${g.id}">
   308	          <div class="str-card-head">
   309	            <div class="title">Grupo <b>${htmlEscape(g.letra || g.nombre || "?")}</b></div>
   310	            <div class="sub">Capacidad: ${g.tam ?? "-"} · Ocupadas: ${(g.participantes||[]).length}</div>
   311	          </div>
   312	
   313	          <ul class="str-list">
   314	            ${headRow}
   315	            ${filas || `<li class="str-row"><em>Sin participantes</em></li>`}
   316	          </ul>
   317	
   318	          <div class="str-card-foot">
   319	            <div class="str-add">
   320	              <select class="str-add-select">
   321	                <option value="">— Añadir pareja libre —</option>
   322	                ${libresOpt}
   323	              </select>
   324	              <button class="str-btn str-btn-small str-btn-add" type="button">Añadir</button>
   325	            </div>
   326	          </div>
   327	        </div>
   328	      `;
   329	    }).join("");
   330	
   331	    const html = `
   332	      ${topBar}
   333	      <div class="str-free-select">
   334	        <label class="muted">Parejas libres en este torneo</label>
   335	        <select id="str-free-select"><option value="">— Selecciona una pareja —</option>${libresOpt}</select>
   336	        <div class="muted">Puedes elegirla en el selector de cada grupo.</div>
   337	      </div>
   338	      <div class="str-grid-groups">${cards}</div>
   339	    `;
   340	    wrap.innerHTML = html;
   341	
   342	    // listeners
   343	    const btnCrear = qs("#btn-crear-grupo");
   344	    if (btnCrear) btnCrear.addEventListener("click", onCrearGrupo);
   345	
   346	    qsa(".str-btn-add").forEach(btn => {
   347	  btn.addEventListener("click", async () => {
   348	    const card = btn.closest(".str-card.grupo");
   349	    const gid  = parseInt(card?.getAttribute("data-grupo") || "0", 10);
   350	    const sel  = card?.querySelector(".str-add-select");
   351	    const pid  = sel ? parseInt(sel.value || "0", 10) : 0;
   352	
   353	    // ⬇️ Nuevo comportamiento
   354	    if (!gid || !pid) {
   355	      const legacyBtn = document.getElementById('btn-abrir-modal-pareja');
   356	      const altBtn    = document.querySelector('.js-add-pareja');
   357	
   358	      if (legacyBtn) {
   359	        legacyBtn.click();
   360	      } else if (altBtn) {
   361	        altBtn.click();
   362	      } else {
   363	        alert("Selecciona una pareja libre.");
   364	      }
   365	      return;
   366	    }
   367	
   368	    try {
   369	      suppressPairsModal(5000);                 // <-- solo cuando sí hay pid
   370	      btn.disabled = true; btn.textContent = "Añadiendo...";
   371	      await asignarPareja(gid, pid);
   372	      await recargar();
   373	    } catch (e) {
   374	      console.error(e); alert(e.message || "No se pudo añadir.");
   375	    } finally {
   376	      btn.disabled = false; btn.textContent = "Añadir";
   377	    }
   378	  });
   379	});
   380	
   381	
   382	    qsa(".str-btn-remove").forEach(btn => {
   383	      btn.addEventListener("click", async () => {
   384	        const gid = parseInt(btn.getAttribute("data-grupo") || "0", 10);
   385	        const pid = parseInt(btn.getAttribute("data-pareja") || "0", 10);
   386	        if (!gid || !pid) return;
   387	        try {
   388	          btn.disabled = true; btn.textContent = "Quitando...";
   389	          await quitarPareja(gid, pid);
   390	          await recargar();
   391	        } catch (e) {
   392	          console.error(e); alert(e.message || "No se pudo quitar.");
   393	        } finally {
   394	          btn.disabled = false; btn.textContent = "Quitar";
   395	        }
   396	      });
   397	    });
   398	  }
   399	
   400	  // ────────────────────────────────────────────────────────────
   401	  // Acciones
   402	  // ────────────────────────────────────────────────────────────
   403	  async function cargarGrupos() {
   404	    if (!COMP_ID) return;
   405	    const data = await postAjax(ACTIONS.cargar, { competicion_id: COMP_ID });
   406	    state.meta   = data.meta   || state.meta;
   407	    state.grupos = Array.isArray(data.grupos) ? data.grupos : [];
   408	    state.libres = Array.isArray(data.parejas_libres) ? data.parejas_libres : [];
   409	  }
   410	
   411	  async function cargarStandings() {
   412	    try {
   413	      const data = await postAjax(ACTIONS.standings, { competicion_id: COMP_ID });
   414	      const wrap = qs("#str-standings");
   415	      if (wrap) {
   416	        wrap.innerHTML = `<div class="str-card"><div class="str-card-body"><em>Clasificación actualizada.</em></div></div>`;
   417	      }
   418	      void data;
   419	    } catch (e) {
   420	      console.error(e);
   421	    }
   422	  }
   423	
   424	  async function recargar() {
   425	    await Promise.all([cargarGrupos(), cargarStandings()]);
   426	    render();
   427	  }
   428	
   429	  // Abre modal (con fallback defensivo a prompt)
   430	  async function onCrearGrupo() {
   431	    try {
   432	      openCreateModal();
   433	    } catch (e) {
   434	      let nombre = window.prompt("Nombre del grupo (ej. A, B, C). Deja vacío para autogenerar:");
   435	      if (nombre == null) return; // cancel
   436	      nombre = String(nombre).trim();
   437	      try {
   438	        await postAjax(ACTIONS.crear, { competicion_id: COMP_ID, nombre });
   439	        await recargar();
   440	      } catch (err) {
   441	        console.error(err); alert(err.message || "No se pudo crear el grupo.");
   442	      }
   443	    }
   444	  }
   445	
   446	  async function asignarPareja(grupoId, parejaId) {
   447	    return postAjax(ACTIONS.asignar || 'saas_grupo_asignar', {
   448	      competicion_id: COMP_ID,
   449	      grupo_id: grupoId,
   450	      pareja_id: parejaId
   451	    });
   452	  }
   453	
   454	  async function quitarPareja(grupoId, parejaId) {
   455	    return postAjax(ACTIONS.quitar || 'saas_grupo_quitar', {
   456	      competicion_id: COMP_ID,
   457	      grupo_id: grupoId,
   458	      pareja_id: parejaId
   459	    });
   460	  }
   461	
   462	  // ────────────────────────────────────────────────────────────
   463	  // Init
   464	  // ────────────────────────────────────────────────────────────
   465	  document.addEventListener("DOMContentLoaded", async () => {
   466	    if (!COMP_ID) return;
   467	    try {
   468	      ensureCreateModal();  // modal montado desde el inicio
   469	      await cargarGrupos();
   470	      render();
   471	      await cargarStandings();
   472	      console.info('[GROUPS][BOOT]', { AJAX, NONCE, COMP_ID, from: {strTorneo: !!window.strTorneo, str_groups_ajax_obj: !!window.str_groups_ajax_obj}, ACTIONS });
   473	    } catch (e) {
   474	      console.error(e);
   475	    }
   476	  });
   477	
   478	  // Interceptores en captura
   479	  document.addEventListener('click', function (e) {
   480	    const btn = e.target && e.target.closest && e.target.closest('#btn-crear-grupo');
   481	    if (!btn) return;
   482	    e.preventDefault();
   483	    e.stopPropagation();
   484	    e.stopImmediatePropagation();
   485	    try {
   486	      openCreateModal();
   487	    } catch (err) {
   488	      console.error('[GROUPS][MODAL] fallback por error:', err);
   489	      const nombre = window.prompt("Nombre del grupo (ej. A, B, C). Deja vacío para autogenerar:");
   490	      if (nombre != null) {
   491	        postAjax(ACTIONS.crear || 'saas_grupo_crear', {
   492	          competicion_id: COMP_ID,
   493	          nombre: String(nombre).trim()
   494	        }).then(() => {
   495	          return Promise.all([
   496	            (typeof cargarGrupos === 'function' ? cargarGrupos() : Promise.resolve()),
   497	            (typeof cargarStandings === 'function' ? cargarStandings() : Promise.resolve())
   498	          ]);
   499	        }).then(render)
   500	          .catch((e) => alert(e && e.message ? e.message : 'No se pudo crear el grupo.'));
   501	      }
   502	    }
   503	  }, true);
   504	
   505	  document.addEventListener('click', function (e) {
   506	    const addBtn = e.target && e.target.closest && e.target.closest('#str-gestion-grupos .str-btn-add');
   507	    if (!addBtn) return;
   508	    e.stopPropagation();
   509	    e.stopImmediatePropagation();
   510	  }, true);
   511	
   512	})();
   513	
   514	/* ============================================================
   515	   DEBUG TRACE – clicks + llamadas AJAX (admin-ajax.php)
   516	   (Elimina este bloque cuando acabes de depurar)
   517	   ============================================================ */
   518	(function () {
   519	  try {
   520	    var SELECTORES_INTERES = [
   521	      '.str-btn-add',
   522	      '.js-add-pareja',
   523	      '.js-add-pareja-grupo',
   524	      '#btn-abrir-modal-pareja',
   525	      '.js-add-jugador',
   526	      '#btn-abrir-modal-invitacion-jugador'
   527	    ];
   528	
   529	    function matchedSelector(el) {
   530	      for (var i=0;i<SELECTORES_INTERES.length;i++){
   531	        try { if (el.matches(SELECTORES_INTERES[i])) return SELECTORES_INTERES[i]; } catch(_) {}
   532	      }
   533	      return null;
   534	    }
   535	
   536	    document.addEventListener('click', function (e) {
   537	      var el = e.target, depth = 0, hit = null;
   538	      while (el && depth < 6 && !hit) {
   539	        var m = matchedSelector(el);
   540	        if (m) hit = { node: el, selector: m };
   541	        el = el.parentElement; depth++;
   542	      }
   543	      if (!hit) return;
   544	
   545	      var text = (hit.node.textContent || '').trim().slice(0,120);
   546	      console.groupCollapsed(
   547	        '%c[TRACE CLICK]%c ' + hit.selector + '  %c' + (text || '(sin texto)'),
   548	        'color:#0ea5e9;font-weight:700', 'color:inherit', 'color:#64748b'
   549	      );
   550	      console.log('Elemento que hizo match:', hit.node);
   551	      if (hit.node.dataset) console.log('dataset:', JSON.parse(JSON.stringify(hit.node.dataset)));
   552	      console.trace('Stack');
   553	      console.groupEnd();
   554	    }, true);
   555	
   556	    if (typeof window.fetch === 'function') {
   557	      var _fetch = window.fetch;
   558	      window.fetch = function (input, init) {
   559	        try {
   560	          var url = (typeof input === 'string') ? input : (input && input.url) || '';
   561	          if (url.indexOf('/wp-admin/admin-ajax.php') !== -1) {
   562	            var method = (init && init.method) ? String(init.method).toUpperCase() : 'GET';
   563	            var bodyStr = '';
   564	            if (init && init.body) {
   565	              if (typeof init.body === 'string') bodyStr = init.body;
   566	              else if (init.body instanceof URLSearchParams) bodyStr = init.body.toString();
   567	              else if (typeof FormData !== 'undefined' && init.body instanceof FormData) {
   568	                var tmp=[]; init.body.forEach(function(v,k){ tmp.push(encodeURIComponent(k)+'='+encodeURIComponent(v)); });
   569	                bodyStr = tmp.join('&');
   570	              }
   571	            }
   572	            var m = bodyStr.match(/(?:^|&|;)action=([^&;]+)/i);
   573	            var actionName = m ? decodeURIComponent(m[1]) : '(sin action)';
   574	            console.groupCollapsed(
   575	              '%c[TRACE AJAX]%c ' + method + ' admin-ajax.php  %caction=' + actionName,
   576	              'color:#22c55e;font-weight:700', 'color:inherit', 'color:#64748b'
   577	            );
   578	            if (bodyStr) console.log('Body:', bodyStr.length>500 ? bodyStr.slice(0,500)+'…' : bodyStr);
   579	            console.trace('Stack');
   580	            console.groupEnd();
   581	          }
   582	        } catch (_) {}
   583	        return _fetch.apply(this, arguments);
   584	      };
   585	    }
   586	
   587	    if (window.jQuery && window.jQuery.ajax) {
   588	      (function ($) {
   589	        var _ajax = $.ajax;
   590	        $.ajax = function (opts) {
   591	          try {
   592	            var url = (typeof opts === 'string') ? opts : (opts && opts.url) || '';
   593	            if (url.indexOf('/wp-admin/admin-ajax.php') !== -1) {
   594	              var dataStr = '';
   595	              if (opts && opts.data) {
   596	                if (typeof opts.data === 'string') dataStr = opts.data;
   597	                else if (opts.data instanceof URLSearchParams) dataStr = opts.data.toString();
   598	                else if (typeof opts.data === 'object') {
   599	                  var parts=[]; for (var k in opts.data){ if(Object.prototype.hasOwnProperty.call(opts.data,k)){ parts.push(encodeURIComponent(k)+'='+encodeURIComponent(opts.data[k])); } }
   600	                  dataStr = parts.join('&');
   601	                }
   602	              }
   603	              var m = dataStr.match(/(?:^|&|;)action=([^&;]+)/i);
   604	              var actionName = m ? decodeURIComponent(m[1]) : '(sin action)';
   605	              console.groupCollapsed(
   606	                '%c[TRACE jQ.AJAX]%c admin-ajax.php  %caction=' + actionName,
   607	                'color:#84cc16;font-weight:700', 'color:inherit', 'color:#64748b'
   608	              );
   609	              if (dataStr) console.log('Data:', dataStr.length>500 ? dataStr.slice(0,500)+'…' : dataStr);
   610	              console.trace('Stack');
   611	              console.groupEnd();
   612	            }
   613	          } catch(_) {}
   614	          return _ajax.apply(this, arguments);
   615	        };
   616	      })(window.jQuery);
   617	    }
   618	
   619	    console.info('%c[TRACE ACTIVADO]%c Mira la consola: clicks relevantes y AJAX a admin-ajax.php.',
   620	      'color:#0ea5e9;font-weight:700','color:inherit');
   621	  } catch (e) {
   622	    console.error('[TRACE] fallo al inicializar:', e);
   623	  }
   624	})();
