     1	/** Grupos – Frontend (gestión simple)
     2	 * Requiere que el PHP haya localizado window.str_groups_ajax_obj (ver enqueue).
     3	 * Este fichero:
     4	 *  - Carga grupos + parejas libres
     5	 *  - Crea grupos (modal; con fallback a prompt)
     6	 *  - Asigna/Quita parejas en grupos
     7	 *  - Recalcula standings
     8	 */
     9	
    10	/* ────────────────────────────────────────────────────────────────
    11	   SHIM: crea window.strTorneo a partir de str_groups_ajax_obj
    12	   ──────────────────────────────────────────────────────────────── */
    13	(function (w) {
    14	  if (w.strTorneo) return;
    15	  var S = w.str_groups_ajax_obj || {};
    16	  if (!S || !S.ajax_url || !S.post_id) return;
    17	  var A = (S.actions || {});
    18	  w.strTorneo = {
    19	    ajaxUrl: S.ajax_url,
    20	    nonce:  S.nonce || '',
    21	    competicionId: parseInt(S.post_id, 10) || 0,
    22	    actions: {
    23	      cargar:    A.cargar    || 'saas_grupos_cargar',
    24	      aleatorio: A.aleatorio || 'saas_grupos_aleatorio',
    25	      asignar:   A.asignar   || 'saas_grupo_asignar',
    26	      standings: A.standings || 'saas_grupos_standings',
    27	      bracket:   A.bracket   || 'saas_bracket_volcar',
    28	      crear:     A.crear     || 'saas_grupo_crear',
    29	      quitar:    A.quitar    || 'saas_grupo_quitar'
    30	    }
    31	  };
    32	})(window);
    33	
    34	(function () {
    35	  "use strict";
    36	
    37	  // ---- GUARD: evita doble inicialización si el script se carga dos veces ----
    38	  if (window.__STR_GROUPS_BOOTED__) { try { console.warn('[GROUPS] Ya inicializado; salto.'); } catch(e) {} return; }
    39	  window.__STR_GROUPS_BOOTED__ = true;
    40	
    41	  // ────────────────────────────────────────────────────────────
    42	  // Utilidades / Config
    43	  // ────────────────────────────────────────────────────────────
    44	  const cfg = (window && window.strTorneo) ? window.strTorneo : {};
    45	  const AJAX = cfg.ajaxUrl || (window.ajaxurl || "/wp-admin/admin-ajax.php");
    46	  const NONCE = cfg.nonce || "";
    47	  const COMP_ID = parseInt(cfg.competicionId || 0, 10);
    48	  const ACTIONS = Object.assign({
    49	    crear:     'saas_grupo_crear',
    50	    cargar:    'saas_grupos_cargar',
    51	    asignar:   'saas_grupo_asignar',
    52	    quitar:    'saas_grupo_quitar',
    53	    aleatorio: 'saas_grupos_aleatorio',
    54	    standings: 'saas_grupos_standings',
    55	    bracket:   'saas_bracket_volcar',
    56	  }, (cfg.actions || {}));
    57	
    58	  const qs  = (sel) => document.querySelector(sel);
    59	  const qsa = (sel) => Array.from(document.querySelectorAll(sel));
    60	
    61	  // --- Supresión temporal del modal de "parejas" cuando operamos en grupos ---
    62	  function suppressPairsModal(ms = 4000) {
    63	    try { window.__STR_SUPPRESS_PAIRS_MODAL__ = Date.now() + ms; } catch(_) {}
    64	  }
    65	  function isPairsSuppressed() {
    66	    try { return window.__STR_SUPPRESS_PAIRS_MODAL__ && Date.now() < window.__STR_SUPPRESS_PAIRS_MODAL__; } catch(_) { return false; }
    67	  }
    68	
    69	  function encode(data) {
    70	    return Object.keys(data)
    71	      .map(k => encodeURIComponent(k) + "=" + encodeURIComponent(data[k] == null ? "" : data[k]))
    72	      .join("&");
    73	  }
    74	
    75	  async function postAjax(action, data = {}) {
    76	    const payload = Object.assign({}, data, {
    77	      action,
    78	      nonce: NONCE,
    79	      _ajax_nonce: NONCE
    80	    });
    81	
    82	    const res = await fetch(AJAX, {
    83	      method: "POST",
    84	      credentials: "same-origin",
    85	      headers: { "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8" },
    86	      body: encode(payload),
    87	    });
    88	
    89	    try {
    90	      const json = await res.json();
    91	      if (json && json.success) return json.data;
    92	      const msg = (json && (json.data?.message || json.message)) || "Error AJAX (success=false)";
    93	      throw new Error(msg);
    94	    } catch (e) {
    95	      let raw = "";
    96	      try { raw = await res.text(); } catch (_){}
    97	      if (!(e instanceof Error && e.message === "Unexpected end of JSON input")) {
    98	        console.error("[GRUPOS] AJAX error:", e.message, "RAW:", raw);
    99	        throw e;
   100	      }
   101	      console.error("[GRUPOS] Respuesta no JSON:", raw);
   102	      throw new Error("Respuesta no válida del servidor (no JSON).");
   103	    }
   104	  }
   105	
   106	  window.__STR_GROUPS_POST__ = postAjax;
   107	
   108	  function htmlEscape(str){
   109	    if(str==null) return "";
   110	    return String(str).replace(/[&<>"']/g, m=>({ "&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#039;" }[m]));
   111	  }
   112	
   113	  // ⚠️ NUEVO HELPER: marcar error en el <select> sin usar alert()
   114	  function showSelectError(sel, message = "Selecciona una pareja libre.") {
   115	    if (!sel) return;
   116	    const wrap = sel.closest('.str-card-foot') || sel.parentElement;
   117	
   118	    sel.classList.add('str-field-error');
   119	    sel.setAttribute('aria-invalid', 'true');
   120	
   121	    let msg = wrap && wrap.querySelector('.str-inline-error');
   122	    if (!msg && wrap) {
   123	      msg = document.createElement('div');
   124	      msg.className = 'str-inline-error';
   125	      msg.textContent = message;
   126	      wrap.appendChild(msg);
   127	    } else if (msg) {
   128	      msg.textContent = message;
   129	    }
   130	
   131	    sel.focus();
   132	
   133	    setTimeout(() => {
   134	      if (msg && msg.parentNode) msg.parentNode.removeChild(msg);
   135	      sel.classList.remove('str-field-error');
   136	      sel.removeAttribute('aria-invalid');
   137	    }, 2200);
   138	  }
   139	
   140	  // ────────────────────────────────────────────────────────────
   141	  // Estado
   142	  // ────────────────────────────────────────────────────────────
   143	  const state = {
   144	    meta: { n_grupos: 0, n_parejas: 0, fase_final: "", modo_final: "" },
   145	    grupos: [],       // [{id, letra, tam, participantes:[{id,title,puntos?}]}]
   146	    libres: [],       // [{id,title}]
   147	    loading: false
   148	  };
   149	
   150	  // ────────────────────────────────────────────────────────────
   151	  // (OPCIÓN A) Declaración HOISTED del submit del modal
   152	  // ────────────────────────────────────────────────────────────
   153	  async function submitCreateModal() {
   154	    const btn  = document.getElementById('str-modal-create-btn');
   155	    const err  = document.getElementById('str-modal-err');
   156	    const name = (document.getElementById('str-modal-name')?.value || '').trim();
   157	
   158	    if (!COMP_ID) {
   159	      if (err) err.textContent = 'Competición inválida.', err.classList.add('show');
   160	      return;
   161	    }
   162	
   163	    try {
   164	      if (btn) btn.disabled = true, btn.textContent = 'Creando…';
   165	      await postAjax(ACTIONS.crear || 'saas_grupo_crear', { competicion_id: COMP_ID, nombre: name });
   166	      await Promise.all([
   167	        (typeof cargarGrupos === 'function' ? cargarGrupos() : Promise.resolve()),
   168	        (typeof cargarStandings === 'function' ? cargarStandings() : Promise.resolve()),
   169	      ]);
   170	      closeCreateModal();
   171	    } catch (e) {
   172	      if (err) {
   173	        err.textContent = (e && e.message) ? e.message : 'No se pudo crear el grupo.';
   174	        err.classList.add('show');
   175	      } else {
   176	        alert(e && e.message ? e.message : 'No se pudo crear el grupo.');
   177	      }
   178	    } finally {
   179	      if (btn) btn.disabled = false, btn.textContent = 'Crear';
   180	    }
   181	  }
   182	
   183	  // ────────────────────────────────────────────────────────────
   184	  // Modal "Crear grupo"
   185	  // ────────────────────────────────────────────────────────────
   186	  function ensureCreateModal() {
   187	    if (document.getElementById('str-modal-create-group')) return;
   188	
   189	    const overlay = document.createElement('div');
   190	    overlay.className = 'str-modal-overlay';
   191	    overlay.id = 'str-modal-overlay';
   192	
   193	    const modal = document.createElement('div');
   194	    modal.className = 'str-modal';
   195	    modal.id = 'str-modal-create-group';
   196	    modal.setAttribute('role', 'dialog');
   197	    modal.setAttribute('aria-modal', 'true');
   198	    modal.setAttribute('aria-labelledby', 'str-modal-create-title');
   199	
   200	    modal.innerHTML = `
   201	      <div class="str-modal-dialog" role="document">
   202	        <div class="str-modal-head">
   203	          <h3 class="str-modal-title" id="str-modal-create-title">Crear grupo</h3>
   204	        </div>
   205	        <div class="str-modal-body">
   206	          <form id="str-modal-create-form">
   207	            <div class="str-field">
   208	              <label for="str-modal-name">Nombre del grupo <span class="str-muted">(opcional, ej. A, B, C)</span></label>
   209	              <input type="text" id="str-modal-name" name="nombre" placeholder="A, B, C…" autocomplete="off" />
   210	              <div id="str-modal-err" class="str-error"></div>
   211	            </div>
   212	            <input type="hidden" id="str-modal-capacity" name="capacidad" value="" />
   213	          </form>
   214	        </div>
   215	        <div class="str-modal-foot">
   216	          <button type="button" class="str-btn" id="str-modal-cancel">Cancelar</button>
   217	          <button type="button" class="str-btn str-btn-primary" id="str-modal-create-btn">Crear</button>
   218	        </div>
   219	      </div>
   220	    `;
   221	
   222	    document.body.appendChild(overlay);
   223	    document.body.appendChild(modal);
   224	
   225	    overlay.addEventListener('click', closeCreateModal);
   226	    document.addEventListener('keydown', (e) => { if (e.key === 'Escape') closeCreateModal(); });
   227	
   228	    // 👉 Aquí usamos la función hoisted
   229	    document.getElementById('str-modal-cancel')?.addEventListener('click', closeCreateModal);
   230	    document.getElementById('str-modal-create-btn')?.addEventListener('click', submitCreateModal);
   231	    document.getElementById('str-modal-create-form')?.addEventListener('submit', (e) => {
   232	      e.preventDefault();
   233	      submitCreateModal();
   234	    });
   235	  }
   236	
   237	  function openCreateModal() {
   238	    ensureCreateModal();
   239	    const overlay = document.getElementById('str-modal-overlay');
   240	    const modal   = document.getElementById('str-modal-create-group');
   241	    const input   = document.getElementById('str-modal-name');
   242	    const err     = document.getElementById('str-modal-err');
   243	
   244	    if (err) err.classList.remove('show'), (err.textContent = '');
   245	    overlay?.classList.add('show');
   246	    modal?.classList.add('show');
   247	    setTimeout(() => input?.focus(), 30);
   248	    trapFocus(modal);
   249	  }
   250	
   251	  function closeCreateModal() {
   252	    const overlay = document.getElementById('str-modal-overlay');
   253	    const modal   = document.getElementById('str-modal-create-group');
   254	    overlay?.classList.remove('show');
   255	    modal?.classList.remove('show');
   256	  }
   257	
   258	  function trapFocus(container) {
   259	    if (!container) return;
   260	    const focusables = container.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
   261	    const list = Array.from(focusables);
   262	    if (list.length === 0) return;
   263	    const first = list[0], last = list[list.length - 1];
   264	    container.addEventListener('keydown', function onKey(e) {
   265	      if (e.key !== 'Tab') return;
   266	      if (e.shiftKey) {
   267	        if (document.activeElement === first) { last.focus(); e.preventDefault(); }
   268	      } else {
   269	        if (document.activeElement === last) { first.focus(); e.preventDefault(); }
   270	      }
   271	    });
   272	  }
   273	
   274	  // ────────────────────────────────────────────────────────────
   275	  // Render UI
   276	  // ────────────────────────────────────────────────────────────
   277	  function ensureRoot() {
   278	    let mount = document.getElementById('str-gestion-grupos');
   279	    if (!mount) {
   280	      mount = document.createElement('div');
   281	      mount.id = 'str-gestion-grupos';
   282	      document.body.appendChild(mount);
   283	      try { console.info('[GROUPS] No existía #str-gestion-grupos. Se ha inyectado al final del <body>.'); } catch(_) {}
   284	    }
   285	    return mount;
   286	  }
   287	
   288	  function render() {
   289	    const wrap = ensureRoot();
   290	
   291	    const topBar = `
   292	      <div class="str-topbar">
   293	        <div class="str-topbar-left">
   294	          <div class="muted">Competición: #${COMP_ID}</div>
   295	          <div class="muted">Grupos: ${state.meta.n_grupos || state.grupos.length}</div>
   296	          <div class="muted">Parejas libres: ${state.libres.length}</div>
   297	        </div>
   298	        <div class="str-topbar-right">
   299	          <button id="btn-crear-grupo" class="str-btn str-btn-primary" type="button">Crear grupo</button>
   300	        </div>
   301	      </div>
   302	    `;
   303	
   304	    const libresOpt = state.libres.map(p => `<option value="${p.id}">${htmlEscape(p.title)}</option>`).join("");
   305	
   306	    const cards = state.grupos.map(g => {
   307	      // Cabecera de columnas dentro del card
   308	      const headRow = `
   309	        <li class="str-row str-row-head">
   310	          <div class="str-pair-name"><span>Pareja</span></div>
   311	          <div class="str-points"><span>Puntos</span></div>
   312	          <div class="str-actions"><span>Acciones</span></div>
   313	        </li>
   314	      `;
   315	
   316	      const filas = (g.participantes || []).map(p => {
   317	        const pts = (typeof p.puntos === 'number' ? p.puntos : 0);
   318	        return `
   319	          <li class="str-row">
   320	            <div class="str-pair-name">${htmlEscape(p.title)}</div>
   321	            <div class="str-points">
   322	              <input class="str-points-input" type="number" min="0" step="1"
   323	                     value="${pts}" inputmode="numeric" aria-label="Puntos" disabled />
   324	            </div>
   325	            <div class="str-actions">
   326	              <button class="str-btn str-btn-small str-btn-remove"
   327	                      data-grupo="${g.id}" data-pareja="${p.id}" type="button">Quitar</button>
   328	            </div>
   329	          </li>
   330	        `;
   331	      }).join("");
   332	
   333	      return `
   334	        <div class="str-card grupo" data-grupo="${g.id}">
   335	          <div class="str-card-head">
   336	            <div class="title">Grupo <b>${htmlEscape(g.letra || g.nombre || "?")}</b></div>
   337	            <div class="sub">Capacidad: ${g.tam ?? "-"} · Ocupadas: ${(g.participantes||[]).length}</div>
   338	          </div>
   339	
   340	          <ul class="str-list">
   341	            ${headRow}
   342	            ${filas || `<li class="str-row"><em>Sin participantes</em></li>`}
   343	          </ul>
   344	
   345	          <div class="str-card-foot">
   346	            <div class="str-add">
   347	              <select class="str-add-select">
   348	                <option value="">— Añadir pareja libre —</option>
   349	                ${libresOpt}
   350	              </select>
   351	              <button class="str-btn str-btn-small str-btn-add" type="button">Añadir</button>
   352	            </div>
   353	          </div>
   354	        </div>
   355	      `;
   356	    }).join("");
   357	
   358	    const html = `
   359	      ${topBar}
   360	      <div class="str-free-select">
   361	        <label class="muted">Parejas libres en este torneo</label>
   362	        <select id="str-free-select"><option value="">— Selecciona una pareja —</option>${libresOpt}</select>
   363	        <div class="muted">Puedes elegirla en el selector de cada grupo.</div>
   364	      </div>
   365	      <div class="str-grid-groups">${cards}</div>
   366	    `;
   367	    wrap.innerHTML = html;
   368	
   369	    // listeners
   370	    const btnCrear = qs("#btn-crear-grupo");
   371	    if (btnCrear) btnCrear.addEventListener("click", onCrearGrupo);
   372	
   373	    // ⚠️ CAMBIO: sin alert(); validación inline con showSelectError()
   374	    qsa(".str-btn-add").forEach(btn => {
   375	      btn.addEventListener("click", async () => {
   376	        const card = btn.closest(".str-card.grupo");
   377	        const gid  = parseInt(card?.getAttribute("data-grupo") || "0", 10);
   378	        const sel  = card?.querySelector(".str-add-select");
   379	        const pid  = sel ? parseInt(sel.value || "0", 10) : 0;
   380	
   381	        if (!gid || !pid) {
   382	  if (sel) {
   383	    sel.classList.add('str-field-error');
   384	    const holder = sel.closest('.str-card-foot') || sel.parentElement;
   385	    let tip = holder && holder.querySelector('.str-inline-error');
   386	    if (!tip && holder) {
   387	      tip = document.createElement('div');
   388	      tip.className = 'str-inline-error';
   389	      tip.textContent = 'Selecciona una pareja libre.';
   390	      holder.appendChild(tip);
   391	    }
   392	    sel.focus();
   393	    setTimeout(() => {
   394	      if (tip && tip.parentNode) tip.parentNode.removeChild(tip);
   395	      sel.classList.remove('str-field-error');
   396	    }, 2000);
   397	  }
   398	  return;
   399	}
   400	
   401	        try {
   402	          suppressPairsModal(5000);
   403	          btn.disabled = true; btn.textContent = "Añadiendo...";
   404	          await asignarPareja(gid, pid);
   405	          await recargar();
   406	        } catch (e) {
   407	          console.error(e); alert(e.message || "No se pudo añadir.");
   408	        } finally {
   409	          btn.disabled = false; btn.textContent = "Añadir";
   410	        }
   411	      });
   412	    });
   413	
   414	    qsa(".str-btn-remove").forEach(btn => {
   415	      btn.addEventListener("click", async () => {
   416	        const gid = parseInt(btn.getAttribute("data-grupo") || "0", 10);
   417	        const pid = parseInt(btn.getAttribute("data-pareja") || "0", 10);
   418	        if (!gid || !pid) return;
   419	        try {
   420	          btn.disabled = true; btn.textContent = "Quitando...";
   421	          await quitarPareja(gid, pid);
   422	          await recargar();
   423	        } catch (e) {
   424	          console.error(e); alert(e.message || "No se pudo quitar.");
   425	        } finally {
   426	          btn.disabled = false; btn.textContent = "Quitar";
   427	        }
   428	      });
   429	    });
   430	  }
   431	
   432	  // ────────────────────────────────────────────────────────────
   433	  // Acciones
   434	  // ────────────────────────────────────────────────────────────
   435	  async function cargarGrupos() {
   436	    if (!COMP_ID) return;
   437	    const data = await postAjax(ACTIONS.cargar, { competicion_id: COMP_ID });
   438	    state.meta   = data.meta   || state.meta;
   439	    state.grupos = Array.isArray(data.grupos) ? data.grupos : [];
   440	    state.libres = Array.isArray(data.parejas_libres) ? data.parejas_libres : [];
   441	  }
   442	
   443	  async function cargarStandings() {
   444	    try {
   445	      const data = await postAjax(ACTIONS.standings, { competicion_id: COMP_ID });
   446	      const wrap = qs("#str-standings");
   447	      if (wrap) {
   448	        wrap.innerHTML = `<div class="str-card"><div class="str-card-body"><em>Clasificación actualizada.</em></div></div>`;
   449	      }
   450	      void data;
   451	    } catch (e) {
   452	      console.error(e);
   453	    }
   454	  }
   455	
   456	  async function recargar() {
   457	    await Promise.all([cargarGrupos(), cargarStandings()]);
   458	    render();
   459	  }
   460	
   461	  // Abre modal (con fallback defensivo a prompt)
   462	  async function onCrearGrupo() {
   463	    try {
   464	      openCreateModal();
   465	    } catch (e) {
   466	      let nombre = window.prompt("Nombre del grupo (ej. A, B, C). Deja vacío para autogenerar:");
   467	      if (nombre == null) return; // cancel
   468	      nombre = String(nombre).trim();
   469	      try {
   470	        await postAjax(ACTIONS.crear, { competicion_id: COMP_ID, nombre });
   471	        await recargar();
   472	      } catch (err) {
   473	        console.error(err); alert(err.message || "No se pudo crear el grupo.");
   474	      }
   475	    }
   476	  }
   477	
   478	  async function asignarPareja(grupoId, parejaId) {
   479	    return postAjax(ACTIONS.asignar || 'saas_grupo_asignar', {
   480	      competicion_id: COMP_ID,
   481	      grupo_id: grupoId,
   482	      pareja_id: parejaId
   483	    });
   484	  }
   485	
   486	  async function quitarPareja(grupoId, parejaId) {
   487	    return postAjax(ACTIONS.quitar || 'saas_grupo_quitar', {
   488	      competicion_id: COMP_ID,
   489	      grupo_id: grupoId,
   490	      pareja_id: parejaId
   491	    });
   492	  }
   493	
   494	  // ────────────────────────────────────────────────────────────
   495	  // Init
   496	  // ────────────────────────────────────────────────────────────
   497	  document.addEventListener("DOMContentLoaded", async () => {
   498	    if (!COMP_ID) return;
   499	    try {
   500	      ensureCreateModal();  // modal montado desde el inicio
   501	      await cargarGrupos();
   502	      render();
   503	      await cargarStandings();
   504	      console.info('[GROUPS][BOOT]', { AJAX, NONCE, COMP_ID, from: {strTorneo: !!window.strTorneo, str_groups_ajax_obj: !!window.str_groups_ajax_obj}, ACTIONS });
   505	    } catch (e) {
   506	      console.error(e);
   507	    }
   508	  });
   509	
   510	  // Interceptores en captura
   511	  document.addEventListener('click', function (e) {
   512	    const btn = e.target && e.target.closest && e.target.closest('#btn-crear-grupo');
   513	    if (!btn) return;
   514	    e.preventDefault();
   515	    e.stopPropagation();
   516	    e.stopImmediatePropagation();
   517	    try {
   518	      openCreateModal();
   519	    } catch (err) {
   520	      console.error('[GROUPS][MODAL] fallback por error:', err);
   521	      const nombre = window.prompt("Nombre del grupo (ej. A, B, C). Deja vacío para autogenerar:");
   522	      if (nombre != null) {
   523	        postAjax(ACTIONS.crear || 'saas_grupo_crear', {
   524	          competicion_id: COMP_ID,
   525	          nombre: String(nombre).trim()
   526	        }).then(() => {
   527	          return Promise.all([
   528	            (typeof cargarGrupos === 'function' ? cargarGrupos() : Promise.resolve()),
   529	            (typeof cargarStandings === 'function' ? cargarStandings() : Promise.resolve())
   530	          ]);
   531	        }).then(render)
   532	          .catch((e) => alert(e && e.message ? e.message : 'No se pudo crear el grupo.'));
   533	      }
   534	    }
   535	  }, true);
   536	
   537	  document.addEventListener('click', function (e) {
   538	    const addBtn = e.target && e.target.closest && e.target.closest('#str-gestion-grupos .str-btn-add');
   539	    if (!addBtn) return;
   540	    e.stopPropagation();
   541	    e.stopImmediatePropagation();
   542	  }, true);
   543	
   544	})();
   545	
   546	/* ============================================================
   547	   DEBUG TRACE – clicks + llamadas AJAX (admin-ajax.php)
   548	   (Elimina este bloque cuando acabes de depurar)
   549	   ============================================================ */
   550	(function () {
   551	  try {
   552	    var SELECTORES_INTERES = [
   553	      '.str-btn-add',
   554	      '.js-add-pareja',
   555	      '.js-add-pareja-grupo',
   556	      '#btn-abrir-modal-pareja',
   557	      '.js-add-jugador',
   558	      '#btn-abrir-modal-invitacion-jugador'
   559	    ];
   560	
   561	    function matchedSelector(el) {
   562	      for (var i=0;i<SELECTORES_INTERES.length;i++){
   563	        try { if (el.matches(SELECTORES_INTERES[i])) return SELECTORES_INTERES[i]; } catch(_) {}
   564	      }
   565	      return null;
   566	    }
   567	
   568	    document.addEventListener('click', function (e) {
   569	      var el = e.target, depth = 0, hit = null;
   570	      while (el && depth < 6 && !hit) {
   571	        var m = matchedSelector(el);
   572	        if (m) hit = { node: el, selector: m };
   573	        el = el.parentElement; depth++;
   574	      }
   575	      if (!hit) return;
   576	
   577	      var text = (hit.node.textContent || '').trim().slice(0,120);
   578	      console.groupCollapsed(
   579	        '%c[TRACE CLICK]%c ' + hit.selector + '  %c' + (text || '(sin texto)'),
   580	        'color:#0ea5e9;font-weight:700', 'color:inherit', 'color:#64748b'
   581	      );
   582	      console.log('Elemento que hizo match:', hit.node);
   583	      if (hit.node.dataset) console.log('dataset:', JSON.parse(JSON.stringify(hit.node.dataset)));
   584	      console.trace('Stack');
   585	      console.groupEnd();
   586	    }, true);
   587	
   588	    if (typeof window.fetch === 'function') {
   589	      var _fetch = window.fetch;
   590	      window.fetch = function (input, init) {
   591	        try {
   592	          var url = (typeof input === 'string') ? input : (input && input.url) || '';
   593	          if (url.indexOf('/wp-admin/admin-ajax.php') !== -1) {
   594	            var method = (init && init.method) ? String(init.method).toUpperCase() : 'GET';
   595	            var bodyStr = '';
   596	            if (init && init.body) {
   597	              if (typeof init.body === 'string') bodyStr = init.body;
   598	              else if (init.body instanceof URLSearchParams) bodyStr = init.body.toString();
   599	              else if (typeof FormData !== 'undefined' && init.body instanceof FormData) {
   600	                var tmp=[]; init.body.forEach(function(v,k){ tmp.push(encodeURIComponent(k)+'='+encodeURIComponent(v)); });
   601	                bodyStr = tmp.join('&');
   602	              }
   603	            }
   604	            var m = bodyStr.match(/(?:^|&|;)action=([^&;]+)/i);
   605	            var actionName = m ? decodeURIComponent(m[1]) : '(sin action)';
   606	            console.groupCollapsed(
   607	              '%c[TRACE AJAX]%c ' + method + ' admin-ajax.php  %caction=' + actionName,
   608	              'color:#22c55e;font-weight:700', 'color:inherit', 'color:#64748b'
   609	            );
   610	            if (bodyStr) console.log('Body:', bodyStr.length>500 ? bodyStr.slice(0,500)+'…' : bodyStr);
   611	            console.trace('Stack');
   612	            console.groupEnd();
   613	          }
   614	        } catch (_) {}
   615	        return _fetch.apply(this, arguments);
   616	      };
   617	    }
   618	
   619	    if (window.jQuery && window.jQuery.ajax) {
   620	      (function ($) {
   621	        var _ajax = $.ajax;
   622	        $.ajax = function (opts) {
   623	          try {
   624	            var url = (typeof opts === 'string') ? opts : (opts && opts.url) || '';
   625	            if (url.indexOf('/wp-admin/admin-ajax.php') !== -1) {
   626	              var dataStr = '';
   627	              if (opts && opts.data) {
   628	                if (typeof opts.data === 'string') dataStr = opts.data;
   629	                else if (opts.data instanceof URLSearchParams) dataStr = opts.data.toString();
   630	                else if (typeof opts.data === 'object') {
   631	                  var parts=[]; for (var k in opts.data){ if(Object.prototype.hasOwnProperty.call(opts.data,k)){ parts.push(encodeURIComponent(k)+'='+encodeURIComponent(opts.data[k])); } }
   632	                  dataStr = parts.join('&');
   633	                }
   634	              }
   635	              var m = dataStr.match(/(?:^|&|;)action=([^&;]+)/i);
   636	              var actionName = m ? decodeURIComponent(m[1]) : '(sin action)';
   637	              console.groupCollapsed(
   638	                '%c[TRACE jQ.AJAX]%c admin-ajax.php  %caction=' + actionName,
   639	                'color:#84cc16;font-weight:700', 'color:inherit', 'color:#64748b'
   640	              );
   641	              if (dataStr) console.log('Data:', dataStr.length>500 ? dataStr.slice(0,500)+'…' : dataStr);
   642	              console.trace('Stack');
   643	              console.groupEnd();
   644	            }
   645	          } catch(_) {}
   646	          return _ajax.apply(this, arguments);
   647	        };
   648	      })(window.jQuery);
   649	    }
   650	
   651	    console.info('%c[TRACE ACTIVADO]%c Mira la consola: clicks relevantes y AJAX a admin-ajax.php.',
   652	      'color:#0ea5e9;font-weight:700','color:inherit');
   653	  } catch (e) {
   654	    console.error('[TRACE] fallo al inicializar:', e);
   655	  }
   656	})();
